{"ast":null,"code":"import { unref as _unref, resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nimport { useRouter } from \"vue-router\";\nimport { toRefs } from \"vue\";\nexport default {\n  __name: 'SlideMenu',\n  props: [\"menu\"],\n\n  setup(__props) {\n    const props = __props;\n    const {\n      menu\n    } = toRefs(props); // const reload = inject(\"reload\");\n\n    const router = useRouter();\n\n    const clickMenu = menu => {\n      let name = menu.url.replace(/\\//g, \"-\") + `-${menu.id}`;\n\n      if (menu.iframe == 1) {\n        name = `i-${menu.id}`;\n      }\n\n      router.push({\n        name\n      });\n    };\n\n    const setIndex = menu => {\n      let index = `/${menu.url.replace(/\\//g, \"-\")}-${menu.id}`;\n\n      if (menu.iframe == 1) {\n        index = `/i-${menu.id}`;\n      }\n\n      return index;\n    };\n    /**\r\n     * @description:过滤空目录\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const filerMenus = menus => {\n      if (menus && menus.length > 0) {\n        let _menus = XE.toTreeArray(menus);\n\n        return _menus.some(item => item.type == 1);\n      } else {\n        return false;\n      }\n    };\n\n    return (_ctx, _cache) => {\n      const _component_el_icon = _resolveComponent(\"el-icon\");\n\n      const _component_slide_menu = _resolveComponent(\"slide-menu\", true);\n\n      const _component_el_sub_menu = _resolveComponent(\"el-sub-menu\");\n\n      const _component_el_menu_item = _resolveComponent(\"el-menu-item\");\n\n      return _unref(menu).type == 0 && filerMenus(_unref(menu).children) ? (_openBlock(), _createBlock(_component_el_sub_menu, {\n        key: 0,\n        index: _unref(menu).id + ''\n      }, {\n        title: _withCtx(() => [_createVNode(_component_el_icon, {\n          size: 16,\n          style: {\n            \"margin-right\": \"6px\"\n          }\n        }, {\n          default: _withCtx(() => [(_openBlock(), _createBlock(_resolveDynamicComponent(_unref(menu).icon)))]),\n          _: 1\n        }), _createElementVNode(\"span\", null, _toDisplayString(_unref(menu).name), 1)]),\n        default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_unref(menu).children, child => {\n          return _openBlock(), _createBlock(_component_slide_menu, {\n            key: child.id,\n            menu: child\n          }, null, 8, [\"menu\"]);\n        }), 128))]),\n        _: 1\n      }, 8, [\"index\"])) : _unref(menu).type == 1 ? (_openBlock(), _createBlock(_component_el_menu_item, {\n        key: 1,\n        index: setIndex(_unref(menu)),\n        onClick: _cache[0] || (_cache[0] = $event => clickMenu(_unref(menu)))\n      }, {\n        title: _withCtx(() => [_createVNode(_component_el_icon, {\n          size: 16,\n          style: {\n            \"margin-right\": \"6px\"\n          }\n        }, {\n          default: _withCtx(() => [(_openBlock(), _createBlock(_resolveDynamicComponent(_unref(menu).icon)))]),\n          _: 1\n        }), _createElementVNode(\"span\", null, _toDisplayString(_unref(menu).name), 1)]),\n        _: 1\n      }, 8, [\"index\"])) : _createCommentVNode(\"\", true);\n    };\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}