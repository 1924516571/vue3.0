{"ast":null,"code":"/*\r\n * @Author: your name\r\n * @Date: 2021-01-12 09:38:09\r\n * @LastEditTime: 2022-01-20 10:37:39\r\n * @LastEditors: Please set LastEditors\r\n * @Description: In User Settings Edit\r\n * @FilePath: \\vue3-element-admin\\src\\utils\\index.js\r\n */\n\n/**\r\n * @description:树形结构转一维数组\r\n * @param {*} nodes\r\n * @return {*}\r\n */\nexport function jsonToArray(nodes) {\n  let pid = -1;\n\n  const toArray = nodes => {\n    let r = [];\n\n    if (Array.isArray(nodes)) {\n      for (let i = 0, l = nodes.length; i < l; i++) {\n        nodes[i].pid = pid;\n        r.push(nodes[i]); // 取每项数据放入一个新数组\n\n        if (Array.isArray(nodes[i][\"children\"]) && nodes[i][\"children\"].length > 0) {\n          // 若存在children则递归调用，把数据拼接到新数组中，并且删除该children\n          pid = nodes[i].id;\n          r = r.concat(toArray(nodes[i][\"children\"]));\n          delete nodes[i][\"children\"];\n        }\n      }\n    }\n\n    return r;\n  };\n\n  return toArray(nodes);\n}\n/**\r\n * @description:一维数组转树形结构\r\n * @param {*} treeArray\r\n * @return {*}\r\n */\n\nexport function arrayToJson(treeArray) {\n  var r = [];\n  var tmpMap = {};\n\n  for (var i = 0, l = treeArray.length; i < l; i++) {\n    //* 以每条数据的id作为obj的key值，数据作为value值存入到一个临时对象里面\n    tmpMap[treeArray[i][\"id\"]] = treeArray[i];\n  }\n\n  for (i = 0, l = treeArray.length; i < l; i++) {\n    var key = tmpMap[treeArray[i][\"pid\"]]; //*循环每一条数据的pid，假如这个临时对象有这个key值，就代表这个key对应的数据有children，需要Push进去\n    //*如果这一项数据属于哪个数据的子级\n\n    if (key) {\n      // *如果这个数据没有children\n      if (!key[\"children\"]) {\n        key[\"children\"] = [];\n        key[\"children\"].push(treeArray[i]); //* 如果这个数据有children\n      } else {\n        key[\"children\"].push(treeArray[i]);\n      }\n    } else {\n      //*如果没有这个Key值，就代表找不到属于哪个数据，那就代表没有父级,直接放在最外层\n      r.push(treeArray[i]);\n    }\n  }\n\n  return r;\n}\n/**\r\n * @description 获取节点的所有父节点\r\n * @param {*} tree\r\n * @param {*} func\r\n * @param {*} path\r\n * @return {*}\r\n */\n\nexport const treeFindPath = (tree, func, name = \"id\", path = []) => {\n  if (!tree) return [];\n\n  for (const data of tree) {\n    //* 这里按照你的需求来存放最后返回的内容吧\n    path.push(data[name]);\n    if (func(data)) return path;\n\n    if (data.children) {\n      const findChildren = treeFindPath(data.children, func, name, path);\n      if (findChildren.length) return findChildren;\n    }\n\n    path.pop();\n  }\n\n  return [];\n};\n/**\r\n * @description: 拆箱函数,解决tooltip显示问题\r\n * @param {*} obj\r\n * @return {*}\r\n */\n\nexport const unwarp = obj => obj && (obj.__v_raw || obj.valueOf() || obj);\n/**\r\n * @description:获取所有的el-svg-icon组件名\r\n * @param {*}\r\n * @return {*}\r\n */\n\nexport const icons = () => {\n  const components = require(\"@element-plus/icons-vue\");\n\n  console.log(\"🚀 ~ file: index.js ~ line 107 ~ icons ~ e\", components);\n  const names = [];\n\n  for (const key in components) {\n    names.push(components[key].name);\n  }\n\n  return names;\n};","map":null,"metadata":{},"sourceType":"module"}