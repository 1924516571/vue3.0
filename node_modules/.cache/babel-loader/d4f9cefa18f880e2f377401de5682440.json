{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { unref as _unref, resolveComponent as _resolveComponent, isRef as _isRef, createVNode as _createVNode, withCtx as _withCtx, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = [\"data-roleId\"];\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\"启用\");\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\"停用\");\n\nconst _hoisted_4 = /*#__PURE__*/_createTextVNode(\"取消\");\n\nconst _hoisted_5 = /*#__PURE__*/_createTextVNode(\"确定\");\n\nimport { onMounted, reactive, ref, toRefs, nextTick } from \"vue\";\nimport { treeFindPath } from \"@/utils\";\nexport default {\n  __name: 'RoleEdit',\n  props: {\n    showDialog: {\n      type: Boolean,\n      default: true\n    },\n    title: {\n      type: String,\n      default: \"添加\"\n    },\n    rowData: {\n      type: Object,\n      default: null\n    }\n  },\n  emits: [\"closeDialog\"],\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const {\n      title,\n      rowData\n    } = toRefs(props);\n\n    const closeDialog = () => {\n      emit(\"closeDialog\", false);\n    };\n\n    const form = reactive({\n      roleName: \"\",\n      name: \"\",\n      role: [],\n      status: 1\n    });\n    const {\n      roleName,\n      name,\n      role,\n      status\n    } = toRefs(form);\n    const formRef = ref(null);\n    const rules = {\n      name: [{\n        required: true,\n        message: \"请输入名称\",\n        trigger: \"blur\"\n      }],\n      roleName: [{\n        required: true,\n        message: \"请输入角色名\",\n        trigger: \"blur\"\n      }],\n      role: [{\n        validator: (rule, value, callback) => {\n          role.value = [...tree.value.getCheckedNodes(), ...tree.value.getHalfCheckedNodes()];\n\n          if (role.value.length < 1) {\n            callback(new Error(\"请选择权限\"));\n          } else {\n            callback();\n          }\n        },\n        required: true\n      }]\n    };\n    const tree = ref(null);\n    const menuList = ref([]);\n    /**\r\n     * @description: 数据初始化\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n    rowData.value && (name.value = rowData.value.name, roleName.value = rowData.value.roleName, status.value = rowData.value.status);\n    /**\r\n     * @description:提交\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n    const onSubmit = () => {\n      formRef.value.validate(async valid => {\n        if (valid) {\n          let res;\n\n          if (title.value == \"添加\") {\n            res = await VE_API.system.roleAdd(form);\n          } else {\n            res = await VE_API.system.roleEdit({\n              id: rowData.value.id,\n              ...form\n            });\n          }\n\n          const {\n            code\n          } = res;\n\n          if (code == \"00\") {\n            closeDialog();\n          }\n        } else {\n          console.log(\"error submit!!\");\n          return false;\n        }\n      });\n    };\n    /**\r\n     * @description: 获取菜单数据\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const getMenuList = async () => {\n      const {\n        code,\n        data\n      } = await VE_API.system.menuList({\n        limit: 10,\n        page: 1,\n        total: 0\n      }, {\n        Global: false\n      });\n\n      if (code == \"00\") {\n        const list = XE.mapTree(XE.toArrayTree(data, {\n          sortKey: \"sort\"\n        }), item => {\n          if (item.children.length <= 0) {\n            delete item.children;\n          }\n\n          return item;\n        });\n        menuList.value = list;\n      }\n    };\n    /**\r\n     * @description:改变按钮的排列样式\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const setMenuStyle = () => {\n      let eles = document.getElementsByClassName(\"ve_tree_item\");\n      Array.from(eles).forEach(e => {\n        const roleId = e.dataset.roleid * 1;\n        const index = treeFindPath(menuList.value, item => item.id == roleId).length - 1;\n        e.parentNode.parentNode.parentNode.style.paddingLeft = index * 18 + \"px\";\n        let oldClass = e.parentNode.className;\n        e.parentNode.className = oldClass + \" fl p0\";\n      });\n    };\n\n    onMounted(async () => {\n      await getMenuList();\n      nextTick(() => {\n        setMenuStyle();\n\n        if (title.value == \"添加\") {\n          tree.value.setCheckedNodes(menuList.value);\n        } else {\n          let _list = XE.toTreeArray(XE.toArrayTree(rowData.value.role)).filter(item => item.children.length < 1);\n\n          tree.value.setCheckedNodes(_list);\n        }\n      });\n    });\n    return (_ctx, _cache) => {\n      const _component_el_input = _resolveComponent(\"el-input\");\n\n      const _component_el_form_item = _resolveComponent(\"el-form-item\");\n\n      const _component_el_tree = _resolveComponent(\"el-tree\");\n\n      const _component_el_scrollbar = _resolveComponent(\"el-scrollbar\");\n\n      const _component_el_card = _resolveComponent(\"el-card\");\n\n      const _component_el_radio_button = _resolveComponent(\"el-radio-button\");\n\n      const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n\n      const _component_el_form = _resolveComponent(\"el-form\");\n\n      const _component_el_button = _resolveComponent(\"el-button\");\n\n      const _component_el_dialog = _resolveComponent(\"el-dialog\");\n\n      return _openBlock(), _createBlock(_component_el_dialog, {\n        title: _unref(title),\n        \"append-to-body\": \"\",\n        \"destroy-on-close\": \"\",\n        \"model-value\": __props.showDialog,\n        onClose: _cache[5] || (_cache[5] = $event => closeDialog())\n      }, {\n        footer: _withCtx(() => [_createElementVNode(\"span\", null, [_createVNode(_component_el_button, {\n          onClick: _cache[3] || (_cache[3] = $event => closeDialog())\n        }, {\n          default: _withCtx(() => [_hoisted_4]),\n          _: 1\n        }), _createVNode(_component_el_button, {\n          type: \"primary\",\n          onClick: _cache[4] || (_cache[4] = $event => onSubmit())\n        }, {\n          default: _withCtx(() => [_hoisted_5]),\n          _: 1\n        })])]),\n        default: _withCtx(() => [_createVNode(_component_el_form, {\n          model: form,\n          ref_key: \"formRef\",\n          ref: formRef,\n          rules: rules,\n          \"label-width\": \"80px\",\n          inline: false\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_form_item, {\n            label: \"名称\",\n            prop: \"name\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: _unref(name),\n              \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _isRef(name) ? name.value = $event : null),\n              placeholder: \"\",\n              clearable: \"\"\n            }, null, 8, [\"modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"角色名\",\n            prop: \"roleName\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_input, {\n              modelValue: _unref(roleName),\n              \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _isRef(roleName) ? roleName.value = $event : null),\n              placeholder: \"\",\n              clearable: \"\"\n            }, null, 8, [\"modelValue\"])]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            class: \"ve_role_item\",\n            label: \"权限\",\n            prop: \"role\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_card, {\n              shadow: \"never\",\n              \"body-style\": {\n                padding: 0,\n                height: '200px'\n              }\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_scrollbar, null, {\n                default: _withCtx(() => [_createVNode(_component_el_tree, {\n                  ref_key: \"tree\",\n                  ref: tree,\n                  data: menuList.value,\n                  \"node-key\": \"id\",\n                  \"default-expand-all\": \"\",\n                  props: {\n                    label: 'name'\n                  },\n                  \"empty-text\": \"暂无数据\",\n                  \"show-checkbox\": \"\",\n                  \"highlight-current\": \"\"\n                }, {\n                  default: _withCtx(({\n                    data\n                  }) => [_createElementVNode(\"span\", {\n                    \"data-roleId\": data.id,\n                    class: _normalizeClass({\n                      ve_tree_item: data.type == 2\n                    })\n                  }, _toDisplayString(data.name), 11, _hoisted_1)]),\n                  _: 1\n                }, 8, [\"data\"])]),\n                _: 1\n              })]),\n              _: 1\n            })]),\n            _: 1\n          }), _createVNode(_component_el_form_item, {\n            label: \"状态\",\n            prop: \"status\"\n          }, {\n            default: _withCtx(() => [_createVNode(_component_el_radio_group, {\n              modelValue: _unref(status),\n              \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _isRef(status) ? status.value = $event : null)\n            }, {\n              default: _withCtx(() => [_createVNode(_component_el_radio_button, {\n                label: 1\n              }, {\n                default: _withCtx(() => [_hoisted_2]),\n                _: 1\n              }), _createVNode(_component_el_radio_button, {\n                label: 0\n              }, {\n                default: _withCtx(() => [_hoisted_3]),\n                _: 1\n              })]),\n              _: 1\n            }, 8, [\"modelValue\"])]),\n            _: 1\n          })]),\n          _: 1\n        }, 8, [\"model\"])]),\n        _: 1\n      }, 8, [\"title\", \"model-value\"]);\n    };\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}