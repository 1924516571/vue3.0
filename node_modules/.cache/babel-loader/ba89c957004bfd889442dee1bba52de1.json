{"ast":null,"code":"import { useRouter } from \"vue-router\";\nimport { toRefs } from \"vue\";\nexport default {\n  __name: 'SlideMenu',\n  props: [\"menu\"],\n\n  setup(__props, {\n    expose\n  }) {\n    expose();\n    const props = __props;\n    const {\n      menu\n    } = toRefs(props);\n    console.log(menu, \"222\"); // const reload = inject(\"reload\");\n\n    const router = useRouter();\n\n    const clickMenu = menu => {\n      let name = menu.url.replace(/\\//g, \"-\") + `-${menu.id}`;\n\n      if (menu.iframe == 1) {\n        name = `i-${menu.id}`;\n      }\n\n      router.push({\n        name\n      });\n    };\n\n    const setIndex = menu => {\n      let index = `/${menu.url.replace(/\\//g, \"-\")}-${menu.id}`;\n\n      if (menu.iframe == 1) {\n        index = `/i-${menu.id}`;\n      }\n\n      return index;\n    };\n    /**\r\n     * @description:过滤空目录\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const filerMenus = menus => {\n      if (menus && menus.length > 0) {\n        let _menus = XE.toTreeArray(menus);\n\n        return _menus.some(item => item.type == 1);\n      } else {\n        return false;\n      }\n    };\n\n    const __returned__ = {\n      props,\n      menu,\n      router,\n      clickMenu,\n      setIndex,\n      filerMenus,\n      useRouter,\n      toRefs\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n\n};","map":{"version":3,"mappings":"AAqBA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,MAAT,QAAuB,KAAvB;;;;;;;;;;IAEA,MAAM;MAAEC;IAAF,IAAWD,MAAM,CAACE,KAAD,CAAvB;IACAC,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAAkB,KAAlB,GAEA;;IACA,MAAMI,MAAM,GAAGN,SAAS,EAAxB;;IACA,MAAMO,SAAS,GAAIL,IAAD,IAAU;MACxB,IAAIM,IAAI,GAAGN,IAAI,CAACO,GAAL,CAASC,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,IAAgC,IAAGR,IAAI,CAACS,EAAG,EAAtD;;MACA,IAAIT,IAAI,CAACU,MAAL,IAAe,CAAnB,EAAsB;QAClBJ,IAAI,GAAI,KAAIN,IAAI,CAACS,EAAG,EAApB;MACH;;MACDL,MAAM,CAACO,IAAP,CAAY;QACRL;MADQ,CAAZ;IAGH,CARD;;IAUA,MAAMM,QAAQ,GAAIZ,IAAD,IAAU;MACvB,IAAIa,KAAK,GAAI,IAAGb,IAAI,CAACO,GAAL,CAASC,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAA6B,IAAGR,IAAI,CAACS,EAAG,EAAxD;;MACA,IAAIT,IAAI,CAACU,MAAL,IAAe,CAAnB,EAAsB;QAClBG,KAAK,GAAI,MAAKb,IAAI,CAACS,EAAG,EAAtB;MACH;;MACD,OAAOI,KAAP;IACH,CAND;IAOA;AACA;AACA;AACA;AACA;;;IACA,MAAMC,UAAU,GAAIC,KAAD,IAAW;MAC1B,IAAIA,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAe,CAA5B,EAA+B;QAC3B,IAAIC,MAAM,GAAGC,EAAE,CAACC,WAAH,CAAeJ,KAAf,CAAb;;QACA,OAAOE,MAAM,CAACG,IAAP,CAAaC,IAAD,IAAUA,IAAI,CAACC,IAAL,IAAa,CAAnC,CAAP;MACH,CAHD,MAGO;QACH,OAAO,KAAP;MACH;IACJ,CAPD","names":["useRouter","toRefs","menu","props","console","log","router","clickMenu","name","url","replace","id","iframe","push","setIndex","index","filerMenus","menus","length","_menus","XE","toTreeArray","some","item","type"],"sources":["C:/Users/Administrator/Desktop/vue3-element-admin-dev/src/components/layout/components/SlideMenu.vue"],"sourcesContent":["<template>\r\n    <el-sub-menu :index=\"menu.id + ''\" v-if=\"menu.type == 0 && filerMenus(menu.children)\">\r\n        <template #title>\r\n            <el-icon :size=\"16\" style=\"margin-right: 6px\">\r\n                <component :is=\"menu.icon\" />\r\n            </el-icon>\r\n            <span>{{ menu.name }}</span>\r\n        </template>\r\n        <slide-menu v-for=\"child in menu.children\" :key=\"child.id\" :menu=\"child\"></slide-menu>\r\n    </el-sub-menu>\r\n    <el-menu-item v-else-if=\"menu.type == 1\" :index=\"setIndex(menu)\" @click=\"clickMenu(menu)\">\r\n        <template #title>\r\n            <el-icon :size=\"16\" style=\"margin-right: 6px\">\r\n                <component :is=\"menu.icon\" />\r\n            </el-icon>\r\n            <span>{{ menu.name }}</span>\r\n        </template>\r\n    </el-menu-item>\r\n</template>\r\n\r\n<script setup>\r\nimport { useRouter } from \"vue-router\";\r\nimport { toRefs } from \"vue\";\r\nconst props = defineProps([\"menu\"]);\r\nconst { menu } = toRefs(props);\r\nconsole.log(menu, \"222\");\r\n\r\n// const reload = inject(\"reload\");\r\nconst router = useRouter();\r\nconst clickMenu = (menu) => {\r\n    let name = menu.url.replace(/\\//g, \"-\") + `-${menu.id}`;\r\n    if (menu.iframe == 1) {\r\n        name = `i-${menu.id}`;\r\n    }\r\n    router.push({\r\n        name,\r\n    });\r\n};\r\n\r\nconst setIndex = (menu) => {\r\n    let index = `/${menu.url.replace(/\\//g, \"-\")}-${menu.id}`;\r\n    if (menu.iframe == 1) {\r\n        index = `/i-${menu.id}`;\r\n    }\r\n    return index;\r\n};\r\n/**\r\n * @description:过滤空目录\r\n * @param {*}\r\n * @return {*}\r\n */\r\nconst filerMenus = (menus) => {\r\n    if (menus && menus.length > 0) {\r\n        let _menus = XE.toTreeArray(menus);\r\n        return _menus.some((item) => item.type == 1);\r\n    } else {\r\n        return false;\r\n    }\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\nli.el-menu-item.is-active {\r\n    background-color: darken($sideBgColor, 15%) !important;\r\n}\r\n.el-menu-item .el-icon svg {\r\n    vertical-align: unset;\r\n}\r\n.el-sub-menu__title .el-icon svg {\r\n    vertical-align: unset;\r\n}\r\n// .el-sub-menu.is-active:not(.is-opened) .el-sub-menu__title i {\r\n//     color: $base-color;\r\n// }\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}