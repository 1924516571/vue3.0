{"ast":null,"code":"import { unref as _unref, resolveComponent as _resolveComponent, isRef as _isRef, createVNode as _createVNode, withCtx as _withCtx, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveDirective as _resolveDirective, openBlock as _openBlock, createBlock as _createBlock, withDirectives as _withDirectives, withModifiers as _withModifiers, createCommentVNode as _createCommentVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"ve_container\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\"重置\");\n\nimport RoleEdit from \"./components/RoleEdit\";\nimport { reactive, toRefs, computed, ref, onMounted, getCurrentInstance } from \"vue\";\nimport { useRoute, useRouter } from \"vue-router\";\nimport { useStore } from \"vuex\";\nimport { findName } from \"../common\"; //*导入公共查询方法\n\nimport { onSubmit, resetForm, handleSizeChange, handleCurrentChange } from \"@/views/layoutpages/common\";\nconst __default__ = {\n  data: () => ({\n    description: \"角色信息查询与设置\",\n    menus: {\n      search: {\n        name: \"查询\"\n      },\n      add: {\n        name: \"添加\"\n      },\n      edit: {\n        name: \"编辑\"\n      },\n      del: {\n        name: \"删除\"\n      },\n      member: {\n        name: \"查看成员\",\n        toPath: true\n      } //topath:true 需要设置跳转路径\n\n    }\n  })\n};\nexport default /*#__PURE__*/Object.assign(__default__, {\n  __name: 'Roles',\n\n  setup(__props) {\n    const {\n      proxy\n    } = getCurrentInstance();\n    const route = useRoute();\n    const router = useRouter();\n    const store = useStore();\n    const menuList = computed(() => store.getters.menuList).value;\n    const rowData = ref(null);\n    const dialogTitle = ref(\"\");\n    const showDialog = ref(false);\n    const queryForm = ref(null);\n    const tableData = ref([]);\n    const params = reactive({\n      name: \"\",\n      limit: 10,\n      page: 1,\n      total: 0\n    });\n    const {\n      name,\n      limit,\n      page,\n      total\n    } = toRefs(params);\n    /**\r\n     * @description:添加or编辑事件\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n    const handleEdit = (title, row = null) => {\n      showDialog.value = true;\n      dialogTitle.value = title;\n      rowData.value = row;\n    };\n    /**\r\n     * @description: dialog事件\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const handelDialog = e => {\n      showDialog.value = e;\n      getDataList();\n    };\n    /**删除行数据\r\n     * @description:\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const handleDel = id => {\n      proxy.$confirm(\"此操作将永久删除该数据, 是否继续?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"error\"\n      }).then(async () => {\n        const {\n          code\n        } = await VE_API.system.roleDel({\n          id\n        });\n\n        if (code == \"00\") {\n          getDataList();\n        }\n      }).catch(() => {\n        proxy.$message({\n          type: \"info\",\n          message: \"已取消删除\"\n        });\n      });\n    };\n    /**\r\n     * @description:查看成员\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const allMember = id => {\n      // 获取当前path的id\n      let pathId = route.name.slice(route.name.lastIndexOf(\"-\") + 1); // 获取要跳转到的路由\n\n      const toName = findName(\"member\", \"system/Users\", pathId, menuList, proxy);\n      router.push({\n        name: toName,\n        query: {\n          id\n        }\n      });\n    };\n    /**\r\n     * @description: 获取列表数据\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const getDataList = async () => {\n      const {\n        code,\n        data\n      } = await VE_API.system.roleList(params);\n\n      if (code == \"00\") {\n        const {\n          limit,\n          page,\n          total,\n          list\n        } = data;\n        params.limit = limit;\n        params.page = page;\n        params.total = total;\n        tableData.value = list;\n      }\n    };\n\n    onMounted(async () => {\n      await getDataList(); // maxHeight(pagination, queryForm, toolBar, ve_max_height);\n    });\n    return (_ctx, _cache) => {\n      const _component_el_input = _resolveComponent(\"el-input\");\n\n      const _component_el_form_item = _resolveComponent(\"el-form-item\");\n\n      const _component_el_button = _resolveComponent(\"el-button\");\n\n      const _component_el_form = _resolveComponent(\"el-form\");\n\n      const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n      const _component_el_tag = _resolveComponent(\"el-tag\");\n\n      const _component_ve_table = _resolveComponent(\"ve-table\");\n\n      const _directive_permission = _resolveDirective(\"permission\");\n\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_form, {\n        ref_key: \"queryForm\",\n        ref: queryForm,\n        inline: true,\n        model: params\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_form_item, {\n          label: \"名称\",\n          prop: \"name\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_input, {\n            clearable: \"\",\n            modelValue: _unref(name),\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _isRef(name) ? name.value = $event : null),\n            placeholder: \"请输入\"\n          }, null, 8, [\"modelValue\"])]),\n          _: 1\n        }), _createVNode(_component_el_form_item, null, {\n          default: _withCtx(() => [_createVNode(_component_el_button, {\n            type: \"primary\",\n            onClick: _cache[1] || (_cache[1] = $event => _unref(onSubmit)(params, getDataList))\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.menus.search.name), 1)]),\n            _: 1\n          }), _createVNode(_component_el_button, {\n            onClick: _cache[2] || (_cache[2] = $event => _unref(resetForm)(queryForm.value, params, getDataList))\n          }, {\n            default: _withCtx(() => [_hoisted_2]),\n            _: 1\n          })]),\n          _: 1\n        })]),\n        _: 1\n      }, 8, [\"model\"]), _createVNode(_component_ve_table, {\n        table: {\n          data: tableData.value\n        },\n        pagination: {\n          onSizeChange: val => _unref(handleSizeChange)(val, params, getDataList),\n          onCurrentChange: val => _unref(handleCurrentChange)(val, params, getDataList),\n          currentPage: _unref(page),\n          pageSize: _unref(limit),\n          total: _unref(total)\n        }\n      }, {\n        tool_bar: _withCtx(() => [_withDirectives((_openBlock(), _createBlock(_component_el_button, {\n          size: \"small\",\n          type: \"primary\",\n          onClick: _cache[3] || (_cache[3] = $event => handleEdit(_ctx.menus.add.name))\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.menus.add.name), 1)]),\n          _: 1\n        })), [[_directive_permission, ['add']]])]),\n        default: _withCtx(() => [_createVNode(_component_el_table_column, {\n          prop: \"name\",\n          label: \"名称\"\n        }), _createVNode(_component_el_table_column, {\n          prop: \"roleName\",\n          label: \"角色名\",\n          width: \"120\"\n        }), _createVNode(_component_el_table_column, {\n          prop: \"status\",\n          label: \"状态\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createVNode(_component_el_tag, {\n            type: row.status == 0 ? 'danger' : ''\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(row.status == 0 ? \"停用\" : \"启用\"), 1)]),\n            _: 2\n          }, 1032, [\"type\"])]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          fixed: \"right\",\n          label: \"操作\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_withDirectives((_openBlock(), _createBlock(_component_el_button, {\n            onClick: _withModifiers($event => handleEdit(_ctx.menus.edit.name, row), [\"prevent\"]),\n            type: \"primary\",\n            size: \"small\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.menus.edit.name), 1)]),\n            _: 2\n          }, 1032, [\"onClick\"])), [[_directive_permission, ['edit']]]), _withDirectives((_openBlock(), _createBlock(_component_el_button, {\n            onClick: _withModifiers($event => handleDel(row.id), [\"prevent\"]),\n            type: \"danger\",\n            size: \"small\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.menus.del.name), 1)]),\n            _: 2\n          }, 1032, [\"onClick\"])), [[_directive_permission, ['del']]]), _withDirectives((_openBlock(), _createBlock(_component_el_button, {\n            onClick: _withModifiers($event => allMember(row.id), [\"prevent\"]),\n            type: \"info\",\n            size: \"small\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.menus.member.name), 1)]),\n            _: 2\n          }, 1032, [\"onClick\"])), [[_directive_permission, ['member']]])]),\n          _: 1\n        })]),\n        _: 1\n      }, 8, [\"table\", \"pagination\"]), showDialog.value ? (_openBlock(), _createBlock(_unref(RoleEdit), {\n        key: 0,\n        rowData: rowData.value,\n        title: dialogTitle.value,\n        showDialog: showDialog.value,\n        onCloseDialog: _cache[4] || (_cache[4] = $event => handelDialog($event))\n      }, null, 8, [\"rowData\", \"title\", \"showDialog\"])) : _createCommentVNode(\"\", true)]);\n    };\n  }\n\n});","map":null,"metadata":{},"sourceType":"module"}