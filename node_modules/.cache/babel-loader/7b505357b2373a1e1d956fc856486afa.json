{"ast":null,"code":"// const Mock = require(\"mockjs\"); //引入\n\n/**\r\n * @description: 列表查询\r\n * @param {*}\r\n * @return {*}\r\n */\nconst searchList = (sRole, sLimit, sPage, sList, sName) => {\n  let list = sList;\n\n  if (sRole !== null && sRole !== \"\" && sRole !== undefined) {\n    list = sList.filter(item => item[sName] + \"\" === sRole + \"\");\n  }\n\n  const res = {};\n  res.total = list.length;\n  res.page = sPage * 1;\n  res.limit = sLimit * 1;\n  res.list = list.slice((sPage - 1) * sLimit, (sPage - 1) * sLimit + sLimit);\n  return {\n    message: \"查询成功!\",\n    code: \"00\",\n    data: res\n  };\n};\n/**\r\n * @description: 列表添加\r\n * @param {*}\r\n * @return {*}\r\n */\n\n\nconst addList = (opt, list, name, sName) => {\n  const flag = list.some(item => {\n    if (item.type != \"undefined\") {\n      if (item.type == 2) {\n        return false;\n      }\n    }\n\n    return item[sName] == name;\n  });\n  let res = {\n    message: \"添加成功!\",\n    code: \"00\"\n  };\n\n  if (flag) {\n    res = {\n      message: \"名称已存在\",\n      code: \"01\"\n    };\n  } else {\n    let item = {\n      id: list[list.length - 1].id + 1,\n      ...opt.body\n    };\n    list.push(item);\n  }\n\n  return res;\n};\n/**\r\n * @description:编辑列表\r\n * @param {*}\r\n * @return {*}\r\n */\n\n\nconst editList = (opt, list) => {\n  const {\n    body: {\n      id\n    }\n  } = opt;\n\n  if (id == -1) {\n    return {\n      message: \"系统超级管理员账户不能编辑!\",\n      code: \"01\"\n    };\n  }\n\n  const index = list.indexOf(list.find(item => item.id + \"\" === id + \"\"));\n  list.fill(opt.body, index, index + 1);\n  return {\n    message: \"编辑成功!\",\n    code: \"00\"\n  };\n};\n/**\r\n * @description:删除列表\r\n * @param {*}\r\n * @return {*}\r\n */\n\n\nconst delList = (opt, list) => {\n  const {\n    body: {\n      id\n    }\n  } = opt;\n\n  if (id == -1) {\n    return {\n      message: \"系统超级管理员账户不能删除!\",\n      code: \"01\"\n    };\n  }\n\n  const index = list.indexOf(list.find(item => item.id + \"\" === id + \"\"));\n  list.splice(index, 1);\n  return {\n    message: \"删除成功!\",\n    code: \"00\"\n  };\n};\n\nconst menuList = [{\n  parentId: -1,\n  id: 100,\n  name: \"系统设置\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  menu: \"\",\n  type: 0,\n  icon: \"Setting\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 100,\n  id: 1,\n  name: \"用户管理\",\n  //看官网，这个名字是3-5之间的\n  url: \"system/Users\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"\",\n  type: 1,\n  icon: \"UserFilled\",\n  sort: 2,\n  iframe: 0\n}, {\n  parentId: 100,\n  id: 1000,\n  name: \"平面设计\",\n  url: \"plane/Design\",\n  menu: \"\",\n  type: 1,\n  icon: \"Promotion\",\n  sort: 2,\n  iframe: 0\n}, {\n  parentId: 1,\n  id: 2,\n  name: \"查询\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"search\",\n  type: 2,\n  icon: \"\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 1,\n  id: 3,\n  name: \"添加\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"add\",\n  type: 2,\n  icon: \"\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 1,\n  id: 4,\n  name: \"编辑\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"edit\",\n  type: 2,\n  icon: \"\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 100,\n  id: 5,\n  name: \"菜单管理\",\n  //看官网，这个名字是3-5之间的\n  url: \"system/Menus\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"\",\n  type: 1,\n  icon: \"Menu\",\n  sort: 1,\n  iframe: 0\n}, {\n  parentId: 5,\n  id: 6,\n  name: \"查询\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"search\",\n  type: 2,\n  icon: \"\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 5,\n  id: 7,\n  name: \"添加\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"add\",\n  type: 2,\n  icon: \"\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 5,\n  id: 8,\n  name: \"编辑\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"edit\",\n  type: 2,\n  icon: \"\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 5,\n  id: 9,\n  name: \"添加子级\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"addChild\",\n  type: 2,\n  icon: \"\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 5,\n  id: 10,\n  name: \"添加按钮\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"addBtn\",\n  type: 2,\n  icon: \"\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 100,\n  id: 11,\n  name: \"角色管理\",\n  //看官网，这个名字是3-5之间的\n  url: \"system/Roles\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"\",\n  type: 1,\n  icon: \"HelpFilled\",\n  sort: 3,\n  iframe: 0\n}, {\n  parentId: 11,\n  id: 12,\n  name: \"查询\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"search\",\n  type: 2,\n  icon: \"\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 11,\n  id: 13,\n  name: \"添加\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"add\",\n  type: 2,\n  icon: \"\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 11,\n  id: 14,\n  name: \"编辑\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"edit\",\n  type: 2,\n  icon: \"\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: -1,\n  id: 15,\n  name: \"参考资料\",\n  //看官网，这个名字是3-5之间的\n  url: \"\",\n  menu: \"\",\n  type: 0,\n  icon: \"DocumentCopy\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 15,\n  id: 16,\n  name: \"vue3.0\",\n  //看官网，这个名字是3-5之间的\n  url: \"https://www.vue3js.cn/docs/zh/\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"\",\n  type: 1,\n  icon: \"Promotion\",\n  sort: 1,\n  iframe: 1\n}, {\n  parentId: 15,\n  id: 17,\n  name: \"element-plus\",\n  //看官网，这个名字是3-5之间的\n  url: \"https://element-plus.org/#/zh-CN\",\n  //这个类似上面的id一个，只是初始值是从100开始的\n  menu: \"\",\n  type: 1,\n  icon: \"ElemeFilled\",\n  sort: 1,\n  iframe: 1\n}];\nconst userList = [{\n  id: -1,\n  name: \"Administrator\",\n  userName: \"超级管理员\",\n  password: \"123456\",\n  role: -1,\n  status: 1\n}, {\n  id: 0,\n  name: \"admin\",\n  userName: \"管理员\",\n  password: \"123456\",\n  role: 0,\n  status: 1\n}, {\n  id: 1,\n  name: \"zt\",\n  userName: \"管理员\",\n  password: \"123456\",\n  role: 0,\n  status: 1\n}];\nconst roleList = [{\n  id: -1,\n  name: \"super\",\n  roleName: \"超级管理员\",\n  status: \"1\",\n  role: menuList\n}, {\n  id: 0,\n  name: \"ceshi\",\n  roleName: \"测试\",\n  status: \"0\",\n  role: menuList\n}];\nconst user = {\n  name: \"\",\n  userId: \"\",\n  roleId: \"\",\n  menus: null\n};\nmodule.exports = {\n  userList: {\n    url: \"/user/list\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      const {\n        body: {\n          role,\n          limit,\n          page\n        }\n      } = opt;\n      return searchList(role, limit, page, userList, \"role\");\n    }\n  },\n  userAdd: {\n    url: \"/user/add\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      const {\n        body: {\n          name\n        }\n      } = opt;\n      return addList(opt, userList, name, \"name\");\n    }\n  },\n  userEdit: {\n    url: \"/user/edit\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      return editList(opt, userList);\n    }\n  },\n  userDel: {\n    url: \"/user/del\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      return delList(opt, userList);\n    }\n  },\n  userStatus: {\n    url: \"/user/status\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      const {\n        body: {\n          id,\n          status\n        }\n      } = opt;\n\n      if (id == -1) {\n        return {\n          message: \"系统超级管理员账户不能停用!\",\n          code: \"01\"\n        };\n      }\n\n      userList.find(item => item.id == id).status = status;\n      return {\n        message: \"切换成功!\",\n        code: \"00\"\n      };\n    }\n  },\n  menuList: {\n    url: \"/menu/list\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      console.log(opt, \"999\");\n      const {\n        body: {\n          name\n        }\n      } = opt;\n      let list = menuList;\n\n      if (name) {\n        list = menuList.filter(item => item.name == name);\n      }\n\n      return {\n        message: \"查询成功!\",\n        code: \"00\",\n        data: list\n      };\n    }\n  },\n  menuAdd: {\n    url: \"/menu/add\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      const {\n        body: {\n          name\n        }\n      } = opt;\n      return addList(opt, menuList, name, \"name\");\n    }\n  },\n  menuEdit: {\n    url: \"/menu/edit\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      return editList(opt, menuList);\n    }\n  },\n  menuDel: {\n    url: \"/menu/del\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      return delList(opt, menuList);\n    }\n  },\n  roleList: {\n    url: \"/role/list\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      const {\n        body: {\n          name,\n          limit,\n          page\n        }\n      } = opt;\n      return searchList(name, limit, page, roleList, \"name\");\n    }\n  },\n  roleAdd: {\n    url: \"/role/add\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      const {\n        body: {\n          name\n        }\n      } = opt;\n      return addList(opt, roleList, name, \"name\");\n    }\n  },\n  roleEdit: {\n    url: \"/role/edit\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      return editList(opt, roleList);\n    }\n  },\n  roleDel: {\n    url: \"/role/del\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      return delList(opt, roleList);\n    }\n  },\n  userMenuList: {\n    url: \"/userMenuList\",\n    type: \"post\",\n    mock: true,\n    response: () => {\n      user.menus = roleList.find(item => item.id == user.roleId).role;\n      return {\n        message: \"查询成功!\",\n        code: \"00\",\n        list: user.menus\n      };\n    }\n  },\n  login: {\n    url: \"/login\",\n    type: \"post\",\n    mock: true,\n    response: opt => {\n      const {\n        body: {\n          userName,\n          pwd\n        }\n      } = opt;\n      let data = {\n        code: \"00\",\n        message: \"登录成功!\",\n        token: new Date().getTime(),\n        uname: userName\n      };\n      user.name = userName;\n\n      let _user = userList.find(item => item.name == user.name);\n\n      if (!_user) {\n        debugger;\n        data = {\n          code: \"01\",\n          message: \"账户不存在\"\n        };\n      } else {\n        if (_user.password !== pwd) {\n          data = {\n            code: \"01\",\n            message: \"密码错误\"\n          };\n        } else {\n          if (_user.status == 0) {\n            data = {\n              code: \"01\",\n              message: \"账户停用\"\n            };\n          } else {\n            user.userId = _user.id;\n            user.roleId = _user.role;\n          }\n        }\n      }\n\n      return data;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}