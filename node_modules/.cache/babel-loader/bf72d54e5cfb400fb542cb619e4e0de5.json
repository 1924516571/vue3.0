{"ast":null,"code":"import { unref as _unref, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, isRef as _isRef, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveDirective as _resolveDirective, withDirectives as _withDirectives, createElementVNode as _createElementVNode, withModifiers as _withModifiers, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"ve_container\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\" 重置 \");\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\" > \");\n\nimport UsersEdit from \"./components/UsersEdit\";\nimport { reactive, toRefs, ref, onMounted, getCurrentInstance } from \"vue\";\nimport { useRoute, useRouter } from \"vue-router\"; //?导入公共查询方法\n\nimport { onSubmit, resetForm, handleSizeChange, handleCurrentChange, getAsyncRouteName } from \"@/views/layoutpages/common\";\nconst __default__ = {\n  data: () => ({\n    description: \"用户信息查询与设置\",\n    menus: {\n      search: {\n        name: \"查询\"\n      },\n      add: {\n        name: \"添加\"\n      },\n      edit: {\n        name: \"编辑\"\n      },\n      del: {\n        name: \"删除\"\n      }\n    }\n  })\n};\nexport default /*#__PURE__*/Object.assign(__default__, {\n  __name: 'Users',\n\n  setup(__props) {\n    const {\n      proxy\n    } = getCurrentInstance();\n    const route = useRoute();\n    const router = useRouter();\n    const rowData = ref(null);\n    const dialogTitle = ref(\"\");\n    const showDialog = ref(false);\n    const queryForm = ref(null);\n    const tableData = ref([]);\n    const params = reactive({\n      role: isNaN(route.query.id * 1) ? \"\" : route.query.id * 1,\n      limit: 10,\n      page: 1,\n      total: 0\n    });\n    const {\n      role,\n      limit,\n      page,\n      total\n    } = toRefs(params);\n    const roleList = ref([]);\n    /**\r\n     * @description:添加or编辑事件\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n    const handleEdit = (title, row = null) => {\n      showDialog.value = true;\n      dialogTitle.value = title;\n      rowData.value = row;\n    };\n    /**\r\n     * @description: 添加页面路由式\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const handleEditRoute = async title => {\n      let path = \"system/components/UsersEditRoute\";\n      const toName = await getAsyncRouteName(title, path, \"add\", {\n        router,\n        route\n      });\n      router.push({\n        name: toName\n      });\n    };\n    /**\r\n     * @description: 获取角色列表\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const getRoleList = async () => {\n      const {\n        code,\n        data\n      } = await VE_API.system.roleList({\n        page: 1,\n        limit: 10\n      } // { Global: false }\n      );\n\n      if (code == \"00\") {\n        const {\n          list\n        } = data;\n        roleList.value = list;\n      }\n    };\n    /**\r\n     * @description: dialog事件\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const handelDialog = e => {\n      showDialog.value = e;\n      getDataList();\n    };\n    /**\r\n     * @description:用户状态切换\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const handelSwitch = async (val, row) => {\n      if (row.id == undefined) return;\n      row.load = 1;\n      const {\n        code\n      } = await VE_API.system.userStatus({\n        id: row.id,\n        status: val\n      }, {\n        Global: false\n      });\n      setTimeout(() => {\n        row.load = 0;\n\n        if (code != \"00\") {\n          row.status = val == 1 ? 0 : 1;\n        }\n      }, 500);\n    };\n    /**删除行数据\r\n     * @description:\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const handleDel = id => {\n      proxy.$confirm(\"此操作将永久删除该数据, 是否继续?\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"error\"\n      }).then(async () => {\n        const {\n          code\n        } = await VE_API.system.userDel({\n          id\n        });\n\n        if (code == \"00\") {\n          getDataList();\n        }\n      }).catch(() => {\n        proxy.$message({\n          type: \"info\",\n          message: \"已取消删除\"\n        });\n      });\n    };\n    /**\r\n     * @description: 获取列表数据\r\n     * @param {*}\r\n     * @return {*}\r\n     */\n\n\n    const getDataList = async () => {\n      const {\n        code,\n        data\n      } = await VE_API.system.userList(params);\n\n      if (code == \"00\") {\n        const {\n          limit,\n          page,\n          total,\n          list\n        } = data;\n        params.limit = limit;\n        params.page = page;\n        params.total = total;\n        tableData.value = list;\n      }\n    };\n\n    onMounted(async () => {\n      await getRoleList();\n      await getDataList(); // maxHeight(pagination, queryForm, toolBar, ve_max_height);\n    });\n    return (_ctx, _cache) => {\n      const _component_el_option = _resolveComponent(\"el-option\");\n\n      const _component_el_select = _resolveComponent(\"el-select\");\n\n      const _component_el_form_item = _resolveComponent(\"el-form-item\");\n\n      const _component_el_button = _resolveComponent(\"el-button\");\n\n      const _component_el_form = _resolveComponent(\"el-form\");\n\n      const _component_el_table_column = _resolveComponent(\"el-table-column\");\n\n      const _component_el_tooltip = _resolveComponent(\"el-tooltip\");\n\n      const _component_el_tag = _resolveComponent(\"el-tag\");\n\n      const _component_el_switch = _resolveComponent(\"el-switch\");\n\n      const _component_ve_table = _resolveComponent(\"ve-table\");\n\n      const _directive_permission = _resolveDirective(\"permission\");\n\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_el_form, {\n        ref_key: \"queryForm\",\n        ref: queryForm,\n        inline: true,\n        model: params\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_form_item, {\n          label: \"角色\",\n          prop: \"role\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_el_select, {\n            clearable: \"\",\n            modelValue: _unref(role),\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _isRef(role) ? role.value = $event : null),\n            placeholder: \"请选择\"\n          }, {\n            default: _withCtx(() => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(roleList.value, item => {\n              return _openBlock(), _createBlock(_component_el_option, {\n                key: item.id,\n                label: item.name,\n                value: item.id\n              }, null, 8, [\"label\", \"value\"]);\n            }), 128))]),\n            _: 1\n          }, 8, [\"modelValue\"])]),\n          _: 1\n        }), _createVNode(_component_el_form_item, null, {\n          default: _withCtx(() => [_createVNode(_component_el_button, {\n            type: \"primary\",\n            onClick: _cache[1] || (_cache[1] = $event => _unref(onSubmit)(params, getDataList))\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.menus.search.name), 1)]),\n            _: 1\n          }), _createVNode(_component_el_button, {\n            onClick: _cache[2] || (_cache[2] = $event => _unref(resetForm)(queryForm.value, params, getDataList))\n          }, {\n            default: _withCtx(() => [_hoisted_2]),\n            _: 1\n          })]),\n          _: 1\n        })]),\n        _: 1\n      }, 8, [\"model\"]), _createVNode(_component_ve_table, {\n        table: {\n          data: tableData.value\n        },\n        pagination: {\n          onSizeChange: val => _unref(handleSizeChange)(val, params, getDataList),\n          onCurrentChange: val => _unref(handleCurrentChange)(val, params, getDataList),\n          currentPage: _unref(page),\n          pageSize: _unref(limit),\n          total: _unref(total)\n        }\n      }, {\n        tool_bar: _withCtx(() => [_withDirectives((_openBlock(), _createBlock(_component_el_button, {\n          title: \"弹窗式\",\n          size: \"small\",\n          type: \"primary\",\n          onClick: _cache[3] || (_cache[3] = $event => handleEdit(_ctx.menus.add.name))\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.menus.add.name), 1)]),\n          _: 1\n        })), [[_directive_permission, ['add']]]), _withDirectives((_openBlock(), _createBlock(_component_el_button, {\n          title: \"路由式\",\n          size: \"small\",\n          type: \"primary\",\n          onClick: _cache[4] || (_cache[4] = $event => handleEditRoute(_ctx.menus.add.name))\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.menus.add.name), 1)]),\n          _: 1\n        })), [[_directive_permission, ['add']]])]),\n        default: _withCtx(() => [_createVNode(_component_el_table_column, {\n          prop: \"name\",\n          label: \"账号\"\n        }), _createVNode(_component_el_table_column, {\n          prop: \"userName\",\n          label: \"用户名\"\n        }), _createVNode(_component_el_table_column, {\n          prop: \"password\",\n          label: \"密码\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createVNode(_component_el_tooltip, {\n            class: \"item\",\n            effect: \"dark\",\n            content: row.password,\n            placement: \"top\"\n          }, {\n            default: _withCtx(() => [_createElementVNode(\"span\", null, _toDisplayString(row.password && row.password.split(\"\").fill(\"*\", 1, -1).join().replace(/\\,/g, \"\")), 1)]),\n            _: 2\n          }, 1032, [\"content\"])]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          prop: \"role\",\n          label: \"角色\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createVNode(_component_el_tag, null, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString((row.role || row.role == 0) && roleList.value.filter(item => item.id == row.role)[0].name), 1)]),\n            _: 2\n          }, 1024)]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          prop: \"status\",\n          label: \"状态\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_createVNode(_component_el_switch, {\n            loading: row.load ? true : false,\n            modelValue: row.status,\n            \"onUpdate:modelValue\": $event => row.status = $event,\n            \"active-value\": 1,\n            \"inactive-value\": 0,\n            \"active-color\": \"#13ce66\",\n            \"inactive-color\": \"#ff4949\",\n            onChange: val => handelSwitch(val, row)\n          }, {\n            default: _withCtx(() => [_hoisted_3]),\n            _: 2\n          }, 1032, [\"loading\", \"modelValue\", \"onUpdate:modelValue\", \"onChange\"])]),\n          _: 1\n        }), _createVNode(_component_el_table_column, {\n          fixed: \"right\",\n          label: \"操作\"\n        }, {\n          default: _withCtx(({\n            row\n          }) => [_withDirectives((_openBlock(), _createBlock(_component_el_button, {\n            onClick: _withModifiers($event => handleEdit(_ctx.menus.edit.name, row), [\"prevent\"]),\n            type: \"primary\",\n            size: \"small\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.menus.edit.name), 1)]),\n            _: 2\n          }, 1032, [\"onClick\"])), [[_directive_permission, ['edit']]]), _withDirectives((_openBlock(), _createBlock(_component_el_button, {\n            onClick: _withModifiers($event => handleDel(row.id), [\"prevent\"]),\n            type: \"danger\",\n            size: \"small\"\n          }, {\n            default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.menus.del.name), 1)]),\n            _: 2\n          }, 1032, [\"onClick\"])), [[_directive_permission, ['del']]])]),\n          _: 1\n        })]),\n        _: 1\n      }, 8, [\"table\", \"pagination\"]), showDialog.value ? (_openBlock(), _createBlock(_unref(UsersEdit), {\n        key: 0,\n        rowData: rowData.value,\n        title: dialogTitle.value,\n        showDialog: showDialog.value,\n        onCloseDialog: _cache[5] || (_cache[5] = $event => handelDialog($event))\n      }, null, 8, [\"rowData\", \"title\", \"showDialog\"])) : _createCommentVNode(\"\", true)]);\n    };\n  }\n\n});","map":null,"metadata":{},"sourceType":"module"}