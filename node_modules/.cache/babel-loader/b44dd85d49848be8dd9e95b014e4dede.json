{"ast":null,"code":"/* eslint-disable indent */\n\n/*\n * @Author: your name\n * @Date: 2020-10-16 10:38:49\n * @LastEditTime: 2021-12-02 15:50:51\n * @LastEditors: Please set LastEditors\n * @Description: In User Settings Edit\n * @FilePath: \\vue3-element-admin\\src\\plugins\\axios.js\n */\n\"use strict\";\n\nimport axios from \"axios\";\nimport Qs from \"qs\";\nimport NProgress from \"nprogress\";\nimport { SET_TOKEN } from \"@/store/modules/app/type\"; // Full config:  https://github.com/axios/axios#request-config\n// axios.defaults.baseURL = process.env.baseURL || process.env.apiUrl || '';\n// axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n// axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n\nconst install = (app, {\n  router,\n  store,\n  opt\n}) => {\n  let config = {\n    Global: true // baseURL: process.env.baseURL || process.env.apiUrl || \"\"\n    // timeout: 60 * 1000, // Timeout\n    // withCredentials: true, // Check cross-site Access-Control\n    // {\"userName\":\"Administrator\",\"pwd\":\"123456\"}\n    // userName=Administrator&pwd=123456\n\n  };\n\n  if (VE_ENV.MODE === \"production\") {\n    config.transformRequest = [data => Qs.parse(data)];\n  }\n\n  const _axios = axios.create(config);\n\n  let ve_loading;\n  let ve_message = null;\n  let loadingCount = 0; // 请求拦截\n\n  _axios.interceptors.request.use(config => {\n    console.log(config);\n    NProgress.done();\n\n    if (config.Global) {\n      NProgress.start();\n      ve_loading = app.config.globalProperties.$loading({\n        lock: true,\n        text: \"Loading\",\n        spinner: \"el-icon-loading\",\n        background: \"rgba(0,0,0,0.1)\"\n      });\n    }\n\n    loadingCount++; //*请求头添加token\n\n    const token = store.getters.token;\n    token && (config.headers.Authorization = token); // Do something before request is sent\n\n    return config;\n  }, error => {\n    // Do something with request error\n    return Promise.reject(error);\n  }); // Add a response interceptor\n  // 响应拦截\n\n\n  _axios.interceptors.response.use(response => {\n    // TODO 根据响应头更新token\n    store.dispatch(`app/${SET_TOKEN}`, new Date().getTime());\n    loadingCount--;\n\n    if (loadingCount <= 0) {\n      NProgress.done();\n      ve_loading.close();\n    }\n\n    let type = \"success\";\n\n    if (response.data.code != \"00\") {\n      type = \"error\";\n    }\n\n    if (ve_message) {\n      ve_message.close();\n      ve_message = null;\n    }\n\n    ve_message = app.config.globalProperties.$message({\n      type,\n      message: response.data.message\n    }); // Do something with response data\n\n    return response.data;\n  }, error => {\n    loadingCount--;\n\n    if (loadingCount <= 0) {\n      NProgress.done();\n      ve_loading.close();\n    }\n\n    if (error && error.response) {\n      let message = \"\";\n\n      switch (error.response.status) {\n        case 400:\n          message = \"请求错误\";\n          break;\n\n        case 401:\n          {\n            message = \"未授权，请登录\";\n            router.replace({\n              name: \"Login\"\n            });\n            break;\n          }\n\n        case 403:\n          message = \"没有权限，拒绝访问\";\n          break;\n\n        case 404:\n          message = `请求地址出错`;\n          break;\n\n        case 408:\n          message = \"请求超时\";\n          break;\n\n        case 500:\n          message = \"服务器内部错误\";\n          break;\n\n        case 501:\n          message = \"服务未实现\";\n          break;\n\n        case 502:\n          message = \"网关错误\";\n          break;\n\n        case 503:\n          message = \"服务不可用\";\n          break;\n\n        case 504:\n          message = \"网关超时\";\n          break;\n\n        case 505:\n          message = \"HTTP版本不受支持\";\n          break;\n\n        default:\n          break;\n      }\n\n      if (ve_message) {\n        ve_message.close();\n        ve_message = null;\n      }\n\n      ve_message = app.config.globalProperties.$message({\n        message,\n        type: \"error\"\n      });\n    } // Do something with response error\n\n\n    return Promise.reject(error);\n  });\n\n  const method = {\n    post: (url, p, config) => _axios.post(url, p, config),\n    get: (url, p, config) => _axios.get(url, Object.assign(config, {\n      params: p\n    }))\n  };\n  let api = {};\n\n  const files = require.context(\"@/api/modules\", false, /\\.js$/);\n\n  files.keys().forEach(key => {\n    const fileName = key.replace(/(\\.\\/|\\.js)/g, \"\");\n    api[fileName] = {};\n    let obj = files(key);\n    Object.keys(obj).forEach(item => {\n      api[fileName][item] = (p, config = {}) => method[obj[item].type](obj[item].url, p, config);\n    });\n  });\n  window[opt] = api;\n  app.config.globalProperties[opt] = api;\n};\n\nexport default {\n  install\n};","map":null,"metadata":{},"sourceType":"module"}