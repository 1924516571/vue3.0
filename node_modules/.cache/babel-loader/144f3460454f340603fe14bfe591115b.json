{"ast":null,"code":"import { createVNode as _createVNode, resolveComponent as _resolveComponent } from \"vue\";\n\n/**\r\n * @description:提交搜索\r\n * @param {*}\r\n * @return {*}\r\n */\nexport const onSubmit = (params, getDataList) => {\n  params.limit = 10;\n  params.page = 1;\n  getDataList();\n};\n/**\r\n * @description:重置\r\n * @param {*}\r\n * @return {*}\r\n */\n\nexport const resetForm = (queryForm, params, getDataList) => {\n  queryForm.resetFields();\n  onSubmit(params, getDataList);\n};\n/**\r\n * @description:每页条数事件\r\n * @param {*}\r\n * @return {*}\r\n */\n\nexport const handleSizeChange = (val, params, getDataList) => {\n  params.page = 1;\n  params.limit = val;\n  getDataList();\n};\n/**\r\n * @description:改变页数事件\r\n * @param {*}\r\n * @return {*}\r\n */\n\nexport const handleCurrentChange = (val, params, getDataList) => {\n  params.page = val;\n  getDataList();\n};\n/**\r\n * @description: 获取按钮跳转菜单的路径\r\n * @param {btnName} 跳转按钮的key值\r\n * @param {toPathUrl} 需要跳转到的菜单的路径 该路径为layoutpages下的文件子路径\r\n * @param {pathId} 当前页面的路由id\r\n * @param {menuList} 所有注册过的路由列表\r\n * @param {proxy} vue实例\r\n * @return {name} 跳转路由的name值\r\n */\n\nexport const findName = (btnName, toPathUrl, pathId, menuList, proxy) => {\n  let toId = \"\";\n\n  let _item = XE.findTree(menuList, item => item.id == pathId);\n\n  if (_item && _item.item && _item.item.children && _item.item.children.length > 0) {\n    let btn = _item.item.children.find(item => item.menu == btnName);\n\n    btn && (toId = btn.toPath);\n  }\n\n  if (toId != \"\") {\n    let _toItem = XE.findTree(menuList, item => item.id == toId);\n\n    if (_toItem && _toItem.item) {\n      if (_toItem.item.iframe == 0) {\n        if (_toItem.item.url == toPathUrl) {\n          return `${toPathUrl.replace(/\\//g, \"-\")}-${toId}`;\n        }\n      } else {\n        return `i-${toId}`;\n      }\n    }\n  }\n\n  proxy.$message({\n    type: \"error\",\n    message: \"无法跳转,请联系系统管理员!\"\n  });\n};\n/**\r\n * @description:根据权限动态添加路由\r\n * @param {title} 标题名称\r\n * @param {path} 组件路径 layoutpages下的组件路径\r\n * @param {name} 按钮key值\r\n * @param {{ router, route }} 路由对象\r\n * @return {_route.name} 返回注册后的name值\r\n */\n\nexport const getAsyncRouteName = async (title, path, name, {\n  router,\n  route\n}) => {\n  const FunctionPage = require(\"@/components/FunctionPage.vue\").default;\n\n  const AsyncComponent = require(\"@/views/layoutpages/\" + path + \".vue\").default; // const { defineAsyncComponent } = require(\"vue\");\n  // const AsyncComponent = defineAsyncComponent(() =>\n  //     import(\"@/views/layoutpages/\" + path + \".vue\")\n  // );\n  // import { defineAsyncComponent } from \"vue\";\n  // import FunctionPage from \"@/components/FunctionPage\";\n\n\n  const app = {\n    components: {\n      FunctionPage,\n      AsyncComponent\n    },\n    data: () => ({\n      rName: null\n    }),\n    methods: {\n      reload(e) {\n        return e.returnValue = \"\";\n      }\n\n    },\n\n    mounted() {\n      this.rName = this.$route.name;\n      window.addEventListener(\"beforeunload\", this.reload);\n    },\n\n    beforeUnmount() {\n      window.removeEventListener(\"beforeunload\", this.reload);\n      this.$router.removeRoute(this.rName);\n    },\n\n    render() {\n      return _createVNode(_resolveComponent(\"function-page\"), {\n        \"title\": title\n      }, {\n        default: () => [_createVNode(_resolveComponent(\"async-component\"), null, null)]\n      });\n    }\n\n  };\n  const _route = {\n    name: route.name + \"/\" + name,\n    path: route.name + \"/\" + name,\n    component: app\n  };\n  await router.addRoute(\"AppMain\", _route);\n  return _route.name;\n};","map":null,"metadata":{},"sourceType":"module"}